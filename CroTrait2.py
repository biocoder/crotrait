# -*- coding: utf-8 -*-

from __future__ import print_function
import os
import sys
import subprocess
from Bio.Seq import Seq
from Bio.Alphabet import IUPAC
import argparse
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import random


seven_species = ["condimenti","dublinensis","malonaticus","muytjensii",
				 "sakazakii","turicensis","universalis", "E.cloacae"]

species_Oserotype = {"condimenti":["CO1"],
					"dublinensis":["DO1a", "DO1b", "DO2"],
					"malonaticus":["MaO1", "MaO2", "MaO3", "MaO4"],
					"muytjensii":["MuO1", "MuO2"],
					"sakazakii":["SO1", "SO2", "SO3", "SO4", "SO6", "SO7"],
					"turicensis":["TO1", "TO3", "TO4"],
					"universalis":["UO1"]}

seven_genes = ["atpD","fusA","glnS","gltB","gyrB","infB","pps"]

def tran_sequence(sequence, path1=os.getcwd(), path2=os.getcwd()):
	"""
	Parameters
	----------
	sequence : sequence file
		input sequence file name don't contain path.
	path1 : original path
		the original path for sequence. The default is os.getcwd().
	path2 : aim path
		the aim path for sequence. The default is os.getcwd().
	Returns
	-------
	new fasta file
	"""
	g_name = sequence[::-1]
	g_name = g_name[g_name.find(".")+1:][::-1]
	wf = open(os.path.join(path2, g_name+".fasta"), "w")
	trait = "wlu"
	with open(os.path.join(path1, sequence)) as f:
		for line in f:
			if ">" in line:
				contig_name = line.strip("\n").split(" ")[0][1:]
				if trait == "wlu":
					wf.write(">"+contig_name+"\n")
					trait = "wlei"
				else:
					wf.write("\n>"+contig_name+"\n")
			else:
				wf.write(line.strip("\n"))
	wf.write("\n")
	wf.close()
	
# for genome, run tran_sequence before running seperate_sequence
def seperate_sequence(sequence):
	"""
	Parameters
	----------
	sequence : input sequence
		input sequence file in fasta format.
	Returns
	-------
	list about contig name
	dictionary about contig sequence
	dictionary about contig length

	"""
	contig_sequence = dict()
	contig_name = list()
	contig_length = dict()
	with open(sequence, "r") as f:
		for line in f:
			if ">" in line:
				m = line.strip("\n")[1:]
				seq = next(f).strip("\n")
				contig_sequence[m] = seq
				contig_name.append(m)
				contig_length[m] = len(seq)
	return(contig_name, contig_sequence, contig_length)

def extract_species(tree, genome_name, species = seven_species):
	"""
	Parameters
	----------
	tree : nwk tree
		nwk tree generated by megacc.
	genome_name : genome name
		the query genome name.
	species : seven species
		the seven species of Cronobacter. The default is seven_species.
	Returns
	-------
	identified species
	"""
	with open(tree) as f:
		nwk_tree = f.readline().strip("\n")
		tree1 = nwk_tree[nwk_tree.find(genome_name):]
		tree1 = tree1[:tree1.find(")")]
		tree2 = nwk_tree[:nwk_tree.find(genome_name)]
		tree2 = tree2[::-1]
		tree2 = tree2[:tree2.find("(")][::-1]
		tree3 = tree2+tree1
		name1 = tree3.split(",")[0].split(":")[0]
		name2 = tree3.split(",")[1].split(":")[0]
		if len(tree3.split(",")) == 2:
			if genome_name == name1 and name2 in species:
				return(name2)
			elif genome_name == name2 and name1 in species:
				return(name1)
			else:
				return("bad")
		else:
			return("bad")

def snp_blast(genome, snp):
	"""
	Parameters
	----------
	genome : query genome
		input query genome.
	snp : final_snp.fasta
		snp site and snp sequence.

	Returns
	-------
	blast result
	"""
	os.system("makeblastdb -in %s -dbtype nucl -out test_db" % snp)
	os.system("blastn -query %s -db test_db -outfmt 6 -out test.txt" % genome)
	result = open("test.txt").readline()
	if len(result) == 0:
		return("bad")
	else:
		return(result)

def generate_snp(genome, snp):
	"""
	Parameters
	----------
	genome : query genome
		input query genome.
	snp : final_snp.fasta
		snp site and snp sequence.
	Returns
	-------
	dictionary containing snp fragment information and sequences.
	"""
	dit_result = dict()
	lst = list()
	with open(snp) as f:
		for line in f:
			if line.startswith(">"):
				m = line.rstrip("\n").split(" ")[0][1:].split("_")[0]
				if m not in lst:
					lst.append(m)
	SNP = seperate_sequence(snp)
	dit_len = dict()
	dit_SNP = dict()
	for i in SNP[0]:
		m = i.split(" ")[0]
		dit_len[m] = SNP[2].get(i)
		dit_SNP[m] = i[i.find(" ")+1:]
	geno = seperate_sequence(genome)
	
	for i in lst:
		wf = open("%s.fasta" % i, "w")
		with open(snp) as f:
			for line in f:
				if line.startswith(">"):
					if line.rstrip("\n").split(" ")[0][1:].split("_")[0] == i:
						wf.write(line)
						wf.write(next(f))
		wf.close()
		result = snp_blast(genome=genome, snp=i+".fasta")
		if result != "bad":
			result_split = result.rstrip("\n").split("\t")
			coverage = (int(result_split[7])-int(result_split[6])+1)/dit_len.get(result_split[1])
			similarity = float(result_split[2])
			if coverage == 1:
				if similarity > 90:
					my_sequence = geno[1].get(result_split[0])[int(result_split[6])-1:int(result_split[7])]
					if int(result_split[8] < result_split[9]):
						aim_sequence = my_sequence
					else:
						aim_sequence = Seq(my_sequence, IUPAC.unambiguous_dna)
						aim_sequence = aim_sequence.reverse_complement()
						aim_sequence = str(aim_sequence)
					fragment = result_split[1].split("_")[0]
					snp_site = dit_SNP.get(result_split[1]).split(" ")
					fragment_snp = ""
					for site in snp_site:
						fragment_snp += aim_sequence[int(site)]
					dit_result[fragment] = fragment_snp
		os.remove("%s.fasta" % i)
	os.remove("test.txt")
	os.remove("test_db.nhr")
	os.remove("test_db.nin")
	os.remove("test_db.nsq")
	return(dit_result)

# phylo_tree(ref_snp="reference_snp.fasta", genome="other_id-1165.fasta",
# 			snp_seq="final_snp.fasta", align_p="align.mao", tree_p="tree.mao")
def phylo_tree(ref_snp, genome, snp_seq, align_p, tree_p):
	"""
	Parameters
	----------
	ref_snp : reference_snp.fasta
		snp sequence from reference strans from Cronobacter seven species.
	genome : query genome
		input query genome.
	snp_seq : final_snp.fasta
		snp site and snp sequence.
	align_p : align.mao
		megacc alignment parameter file.
	tree_p : tree.mao
		megacc phylogeny parameter file.
	Returns
	-------
	identified species of Cronobacter
	"""
	g_name = genome[::-1]
	g_name = g_name[g_name.find(".")+1:][::-1]
	snp = generate_snp(genome=genome, snp=snp_seq)
	snp_fragment = list(snp.keys())
	if len(snp) <= 30:
		aim_species = "bad"
	else:
		wf = open("test.fasta", "w")
		wf.write(">%s\n" % g_name)
		for i in snp_fragment:
			wf.write(snp.get(i))
		wf.write("\n")
		for i in seven_species:
			new_dit = dict()
			with open(ref_snp) as f:
				for line in f:
					if line.startswith(">%s" % i):
						new_dit[line[line.find("_")+1:-1]] = next(f).rstrip("\n")
			wf.write(">%s\n" % i)
			for ni in snp_fragment:
				wf.write(new_dit.get(ni))
			wf.write("\n")
		wf.close()
	os.system("megacc -a %s -d test.fasta -o test" % align_p)
	if os.path.exists(os.path.join(os.getcwd(),"test.meg")):
		os.system("megacc -a %s -d test.meg -o test" % tree_p)
	else:
		os.system("megacc -a %s -d test.fasta -o test" % align_p)
		if os.path.exists(os.path.join(os.getcwd(),"test.meg")):
			os.system("megacc -a %s -d test.meg -o test" % tree_p)
		else:
			os.system("megacc -a %s -d test.fasta -o test" % align_p)
			if os.path.exists(os.path.join(os.getcwd(),"test.meg")):
				os.system("megacc -a %s -d test.meg -o test" % tree_p)
			else:
				aim_species = "bad"
	if os.path.exists("test.nwk"):
		aim_species = extract_species(tree="test.nwk",genome_name=g_name,species=seven_species)
	else:
		aim_species = "bad"
	if os.path.exists("test.fasta"):
		os.remove("test.fasta")
	if os.path.exists("test.meg"):
		os.remove("test.meg")
	if os.path.exists("test_summary.txt"):
		os.remove("test_summary.txt")
	if os.path.exists("test.nwk"):
		os.remove("test.nwk")
	if aim_species == "E.cloacae":
		aim_species = "bad"
	return(aim_species)


def generate_blast(OACs, gene, genome):
	"""
	Parameters
	----------
	OACs : seperate_sequence generated data
		negerated by seperate_seqeunce function.
	gene : input gene
		the query gene.
	genome : input genome
		the input genome.
	Returns
	-------
	blast result
	"""
	wf = open(gene+".fasta", "w")
	m1 = list(OACs)[0]
	m2 = list(OACs)[1]
	for i in m1:
		if gene in i:
			wf.write(">"+i+"\n")
			wf.write(m2.get(i)+"\n")
	wf.close()
	os.system("makeblastdb -in "+gene+".fasta "+"-dbtype nucl "+"-out "+gene)
	os.system("blastn -query "+genome+" -db "+gene+" -outfmt 6 -out "+gene+".txt")
	result = open(gene+".txt").readline()
	os.remove(gene+".txt")
	os.remove(gene+".fasta")
	os.remove(gene+".nhr")
	os.remove(gene+".nin")
	os.remove(gene+".nsq")

	if len(result) == 0:
		return("bad")
	else:
		return(result)


def O_antigen_cluster(OACs, genome, outfmt = 0):

	O_AGCs = seperate_sequence(OACs)
	g_name = genome[::-1]
	g_name = g_name[g_name.find(".")+1:][::-1]
	new_genome = seperate_sequence(genome)

	galF_result = generate_blast(OACs=O_AGCs, genome=genome, gene="galF")
	gnd_result = generate_blast(OACs=O_AGCs, genome=genome, gene="gnd")

	if galF_result=="bad" or gnd_result=="bad":
		return("bad")
	else:
		galF_split = galF_result.split("\t")
		gnd_split  = gnd_result.split("\t")
		if galF_split[0] == gnd_split[0]:
			galF_identity = float(galF_split[2])
			gnd_identity = float(gnd_split[2])
			galF_coverage = float(galF_split[3])/891
			gnd_coverage = float(gnd_split[3])/1407
			if galF_coverage > 0.6 and gnd_coverage > 0.6 and galF_identity > 80 and gnd_identity > 80:
				aim_sequence = list(new_genome)[1].get(galF_split[0])
				lst = [int(galF_split[6]), int(galF_split[7]), int(gnd_split[6]), int(gnd_split[7])]
				my_sequence = aim_sequence[min(lst)-1:max(lst)]
				if float(galF_split[6]) < float(gnd_split[6]) and float(galF_split[8]) < float(galF_split[9]):
					if outfmt == 0:
						return("yes")
					elif outfmt == 1:
						return(my_sequence)
				elif float(galF_split[6]) > float(gnd_split[6]) and float(galF_split[8]) > float(galF_split[9]):
					my_sequence = Seq(my_sequence, IUPAC.unambiguous_dna)
					my_sequence = my_sequence.reverse_complement()
					my_sequence = str(my_sequence)
					if outfmt == 0:
						return("yes")
					elif outfmt == 1:
						return(my_sequence)
				else:
					return("bad")
		else:
			return("bad")


def batch_clusters(OACs, genome_dir,
					prefix="O_antigen_clusters"):
	wf = open("%s.fasta" % prefix, "w")
	g_path = os.path.abspath(genome_dir)
	for i in os.listdir(g_path):
		tran_sequence(sequence=i, path1=g_path, path2=os.getcwd())
		g_name = i[::-1]
		g_name = g_name[g_name.find(".")+1:][::-1]
		cluster = O_antigen_cluster(OACs=OACs, genome="%s.fasta" % g_name, outfmt=1)
		wf.write(">%s\n" % g_name)
		if cluster == "bad":
			wf.write("poor quality genome\n")
		else:
			wf.write("%s\n" % cluster)
		os.remove("%s.fasta" % g_name)
	wf.close()


def O_serotype(OACs_sequence, genome, species):
	g_name = genome[::-1]
	g_name = g_name[g_name.find(".")+1:][::-1]

	serotype = species_Oserotype.get(species)
	OACs = list(seperate_sequence(OACs_sequence))
	contig_name = OACs[0]
	contig_sequence = OACs[1]
	wf = open("specific_gene.fasta", "w")
	for i in contig_name:
		for sero in serotype:
			if sero in i:
				if "wzx" in i or "wzm" in i:
					wf.write(">"+i+"\n")
					wf.write(contig_sequence.get(i)+"\n")
	wf.close()
	wzx_wzm = seperate_sequence("specific_gene.fasta")

	os.system("makeblastdb -in specific_gene.fasta -dbtype nucl -out wzx_or_wzm")
	os.system("blastn -query "+genome+" -db wzx_or_wzm -outfmt 6 -out wzx_or_wzm.txt")
	result = open("wzx_or_wzm.txt").readline()
	os.remove("wzx_or_wzm.txt")
	os.remove("wzx_or_wzm.nhr")
	os.remove("wzx_or_wzm.nin")
	os.remove("wzx_or_wzm.nsq")
	os.remove("specific_gene.fasta")

	if len(result) == 0:
		new_type = O_antigen_cluster(OACs = OACs_sequence, genome = genome, outfmt = 0)
		if new_type == "yes":
			return("new")
		else:
			return("bad")
	else:
		result_split = result.split("\t")
		result_identity = float(result_split[2])
		coverage = float(result_split[3])/float(list(wzx_wzm)[2].get(result_split[1]))
		if result_identity > 90:
			if coverage > 0.5:
				idetified_serotype = result_split[1].split("_")[0]
				return(idetified_serotype)
			else:
				return("bad")
		else:
			new_type = O_antigen_cluster(OACs = OACs_sequence, genome = genome, outfmt = 0)
			if new_type == "yes":
				return("new")
			else:
				return("bad")

def O_DO1(OACs_sequence, genome):
	OACs = list(seperate_sequence(OACs_sequence))
	contig_sequence = OACs[1]
	wf = open("weoB_gene.fasta", "w")
	wf.write(">DO1\n")
	wf.write("%s\n" % contig_sequence.get("DO1a_weoB"))
	wf.close()
	os.system("makeblastdb -in weoB_gene.fasta -dbtype nucl -out weoB")
	os.system("blastn -query "+genome+" -db weoB -outfmt 6 -out weoB.txt")
	result = open("weoB.txt").readline()
	os.remove("weoB.txt")
	os.remove("weoB.nhr")
	os.remove("weoB.nin")
	os.remove("weoB.nsq")
	os.remove("weoB_gene.fasta")
	if len(result) == 0:
		return("DO1b")
	else:
		result_split = result.split("\t")
		result_identity = float(result_split[2])
		if result_identity > 90:
			return("DO1a")

		else:
			return("DO1b")

def extract_MLST(MLST_seq, genome, STtype):
	genome_seq = seperate_sequence(genome)
	genome_contig_seq = list(genome_seq)[1]
	MLST = seperate_sequence(MLST_seq)
	contig_len = list(MLST)[2]
	st_dit = dict()
	st_lst = list()
	with open(STtype) as f:
		for line in f:
			m=line.strip("\n").split("\t")
			st_dit[m[0]] = m[1]
			st_lst.append(m[0])
	gene_type = list()
	for i in seven_genes:
		result = generate_blast(OACs = MLST, genome = genome, gene = i)
		if result == "bad":
			return("bad")
		else:
			result_split = result.strip("\n").split("\t")
			result_identity = float(result_split[2])
			result_coverage = (float(result_split[7])-float(result_split[6])+1)/float(contig_len.get(result_split[1]))
			if result_coverage == 1:
				aim_seq = genome_contig_seq.get(result_split[0])[int(result_split[6])-1:int(result_split[7])]
				aim_seq = aim_seq.upper()
				atcg = aim_seq.count("A")+aim_seq.count("T")+aim_seq.count("G")+aim_seq.count("C")
				if atcg == len(aim_seq):
					if result_identity == 100:
						gene_type.append(result_split[1])
					elif 90 < result_identity < 100:
						gene_type.append(i+"_n")
					else:
						return("bad")
				else:
					return("bad")
			else:
				return("bad")

	st_type = "-".join(gene_type)
	if st_type in st_lst:
		return(st_dit.get(st_type))
	else:
		return("new")


def CroTrait(genome_dir, \
			ref_snp="reference_snp.fasta", snp_seq="final_snp.fasta", \
			align_p="align.mao", tree_p="tree.mao", \
			OACs="Cronobacter_OACs.fasta", \
			MLST_seq="MLST_seven_genes.fasta", STtype="MLST_type.txt", \
			prefix="Cronobacter_MLST_Oserotype",
			sp = "unknown"):
	wf = open("%s.txt" % prefix, "w")
	wf.write("%s\t%s\t%s\t%s\n" % ("id","species","O_type","ST"))
	g_path = os.path.abspath(genome_dir)
	for i in os.listdir(g_path):
		tran_sequence(sequence=i, path1=g_path, path2=os.getcwd())
		g_name = i[::-1]
		g_name = g_name[g_name.find(".")+1:][::-1]
		ST = extract_MLST(MLST_seq=MLST_seq, genome="%s.fasta" % g_name,
						 STtype=STtype)
		if sp == "unknown":
			aim_species = phylo_tree(genome="%s.fasta" % g_name,
									ref_snp=ref_snp, snp_seq=snp_seq,
									align_p=align_p, tree_p=tree_p)
			if aim_species == "bad":
				O_type = "bad"
			else:
				O_type = O_serotype(genome="%s.fasta" % g_name,
									OACs_sequence=OACs, species=aim_species)
				if "DO1" in O_type:
					O_type = O_DO1(OACs_sequence=OACs, genome="%s.fasta" % g_name)
			wf.write("%s\t%s\t%s\t%s\n" % (g_name,aim_species,O_type,ST))
		else:
			aim_species = sp
			O_type = O_serotype(genome="%s.fasta" % g_name,
								OACs_sequence=OACs, species=aim_species)
			if "DO1" in O_type:
				O_type = O_DO1(OACs_sequence=OACs, genome="%s.fasta" % g_name)
			wf.write("%s\t%s\t%s\n" % (g_name,O_type,ST))
		os.remove("%s.fasta" % g_name)
	wf.close()


def stat_cat(df, cat):
	dit = {cat:[], "amount":[], "percent":[]}
	sp = df[cat].value_counts()
	for i in list(sp.index):
		if i not in ["bad", "new"]:
			dit.get(cat).append(i)
			dit.get("amount").append(sp[i])
			dit.get("percent").append(sp[i]/df.shape[0])
	if "new" in sp.index:
		dit.get(cat).append("new")
		dit.get("amount").append(sp["new"])
		dit.get("percent").append(sp["new"]/df.shape[0])
	if "bad" in sp.index:
		dit.get(cat).append("bad")
		dit.get("amount").append(sp["bad"])
		dit.get("percent").append(sp["bad"]/df.shape[0])
	return(dit)


def stat_2cat(df, cat1, cat2):
	dit = {cat1:[], cat2:[], "amount":[], "percent":[]}
	sp = df[cat1].value_counts()
	for i in list(sp.index):
		data = df[df.species == i]
		ot = data[cat2].value_counts()
		if i != "bad":
			for i1 in list(ot.index):
				if i1 not in ["bad", "new"]:
					dit.get(cat1).append(i)
					dit.get(cat2).append(i1)
					dit.get("amount").append(ot[i1])
					dit.get("percent").append(ot[i1]/df.shape[0])
			if "new" in list(ot.index):
				dit.get(cat1).append(i)
				dit.get(cat2).append("new")
				dit.get("amount").append(ot["new"])
				dit.get("percent").append(ot["new"]/df.shape[0])
			if "bad" in list(ot.index):
				dit.get(cat1).append(i)
				dit.get(cat2).append("bad")
				dit.get("amount").append(ot["bad"])
				dit.get("percent").append(ot["bad"]/df.shape[0])

	for i in list(sp.index):
		data = df[df.species == i]
		ot = data[cat2].value_counts()
		if i == "bad":
			for i1 in list(ot.index):
				if i1 not in ["bad", "new"]:
					dit.get(cat1).append(i)
					dit.get(cat2).append(i1)
					dit.get("amount").append(ot[i1])
					dit.get("percent").append(ot[i1]/df.shape[0])
			if "new" in list(ot.index):
				dit.get(cat1).append(i)
				dit.get(cat2).append("new")
				dit.get("amount").append(ot["new"])
				dit.get("percent").append(ot["new"]/df.shape[0])
			if "bad" in list(ot.index):
				dit.get(cat1).append(i)
				dit.get(cat2).append("bad")
				dit.get("amount").append(ot["bad"])
				dit.get("percent").append(ot["bad"]/df.shape[0])
	return(dit)

def stat_3cat(df, cat1, cat2, cat3):
	dit = {cat1:[], cat2:[], cat3:[], "amount":[], "percent":[]}
	sp = df[cat1].value_counts()
	for i in list(sp.index):
		data = df[df.species == i]
		ot = data[cat2].value_counts()
		if i != "bad":
			for i1 in list(ot.index):
				data1 = data[data.O_type==i1]
				st = data1[cat3].value_counts()
				if i1 not in ["bad", "new"]:
				# MLST types
					for i2 in list(st.index):
						if i2 not in ["bad", "new"]:
							dit.get(cat1).append(i)
							dit.get(cat2).append(i1)
							dit.get(cat3).append(i2)
							dit.get("amount").append(st[i2])
							dit.get("percent").append(st[i2]/df.shape[0])
					if "new" in list(st.index):
						dit.get(cat1).append(i)
						dit.get(cat2).append(i1)
						dit.get(cat3).append("new")
						dit.get("amount").append(st["new"])
						dit.get("percent").append(st["new"]/df.shape[0])
					if "bad" in list(st.index):
						dit.get(cat1).append(i)
						dit.get(cat2).append(i1)
						dit.get(cat3).append("bad")
						dit.get("amount").append(st["bad"])
						dit.get("percent").append(st["bad"]/df.shape[0])
			for i1 in list(ot.index):
				data1 = data[data.O_type==i1]
				st = data1[cat3].value_counts()
				if i1 == "new":
				# MLST types
					for i2 in list(st.index):
						if i2 not in ["bad", "new"]:
							dit.get(cat1).append(i)
							dit.get(cat2).append(i1)
							dit.get(cat3).append(i2)
							dit.get("amount").append(st[i2])
							dit.get("percent").append(st[i2]/df.shape[0])
					if "new" in list(st.index):
						dit.get(cat1).append(i)
						dit.get(cat2).append(i1)
						dit.get(cat3).append("new")
						dit.get("amount").append(st["new"])
						dit.get("percent").append(st["new"]/df.shape[0])
					if "bad" in list(st.index):
						dit.get(cat1).append(i)
						dit.get(cat2).append(i1)
						dit.get(cat3).append("bad")
						dit.get("amount").append(st["bad"])
						dit.get("percent").append(st["bad"]/df.shape[0])
			for i1 in list(ot.index):
				data1 = data[data.O_type==i1]
				st = data1[cat3].value_counts()
				if i1 == "bad":
				# MLST types
					for i2 in list(st.index):
						if i2 not in ["bad", "new"]:
							dit.get(cat1).append(i)
							dit.get(cat2).append(i1)
							dit.get(cat3).append(i2)
							dit.get("amount").append(st[i2])
							dit.get("percent").append(st[i2]/df.shape[0])
					if "new" in list(st.index):
						dit.get(cat1).append(i)
						dit.get(cat2).append(i1)
						dit.get(cat3).append("new")
						dit.get("amount").append(st["new"])
						dit.get("percent").append(st["new"]/df.shape[0])
					if "bad" in list(st.index):
							dit.get(cat1).append(i)
							dit.get(cat2).append(i1)
							dit.get(cat3).append("bad")
							dit.get("amount").append(st["bad"])
							dit.get("percent").append(st["bad"]/df.shape[0])

	for i in list(sp.index):
		data = df[df.species==i]
		ot = data[cat2].value_counts()
		# O serotype
		if i == "bad":
			for i1 in list(ot.index):
				data1 = data[data.O_type==i1]
				st = data1[cat3].value_counts()
				if i1 == "bad":
					for i2 in list(st.index):
						if i2 not in ["bad", "new"]:
							dit.get(cat1).append(i)
							dit.get(cat2).append(i1)
							dit.get(cat3).append(i2)
							dit.get("amount").append(st[i2])
							dit.get("percent").append(st[i2]/df.shape[0])
					if "new" in list(st.index):
						dit.get(cat1).append(i)
						dit.get(cat2).append(i1)
						dit.get(cat3).append("new")
						dit.get("amount").append(st["new"])
						dit.get("percent").append(st["new"]/df.shape[0])
					if "bad" in list(st.index):
						dit.get(cat1).append(i)
						dit.get(cat2).append(i1)
						dit.get(cat3).append("bad")
						dit.get("amount").append(st["bad"])
						dit.get("percent").append(st["bad"]/df.shape[0])
	return(dit)

def stat_summary(df):
	df = pd.read_table(df)
	category = list(df.columns[1:])
	for i in category:
		m = stat_cat(df, i)
		m = pd.DataFrame(data=m)
		m.to_csv("statisticed_by_%s.txt" % i, index=False, sep="\t")
	#
	m = stat_2cat(df=df, cat1="species", cat2="O_type")
	m = pd.DataFrame(data=m)
	m.to_csv("statisticed_by_speciesAndO_type.txt", index=False, sep="\t")
	#
	m = stat_2cat(df=df, cat1="species", cat2="ST")
	m = pd.DataFrame(data=m)
	m.to_csv("statisticed_by_speciesAndST.txt", index=False, sep="\t")
	#
	m = stat_3cat(df=df, cat1="species", cat2="O_type",cat3="ST")
	m = pd.DataFrame(data=m)
	m.to_csv("statisticed_by_speciesAndO_typeAndST.txt", index=False, sep="\t")


def randomcolor():
    colorArr = ['1','2','3','4','5','6','7','8','9','A','B','C','D','E','F']
    color = ""
    for i in range(6):
        color += colorArr[random.randint(0,14)]
    return "#"+color

def visualization(Cro_result, prefix="stat_visual"):

	df = pd.read_table(Cro_result)
	m = stat_cat(df, cat="species")
	df1 = pd.DataFrame(data=m)
	m = stat_2cat(df,cat1="species", cat2="O_type")
	df2 = pd.DataFrame(data=m)
	m = stat_3cat(df, cat1="species", cat2="O_type", cat3="ST")
	df3 = pd.DataFrame(data=m)

	fig = plt.figure(figsize=(6,6), dpi=100)
	ax = fig.add_subplot(1,1,1, projection="polar")
	ax.set_axis_off()
	ax.set_theta_direction(-1)
	ax.set_theta_zero_location("N")

	# the inner circle for species
	unit = np.pi*2*7/8/df1["amount"].sum()
	df1["width"] = df1["amount"]*unit
	df1["theta"] = df1["width"].cumsum()
	s_color = ["#00aeff","#3369e7","#8e43e7","#b84592","#ff6c5f","#ffc168","#2dde98"]
	for i in range(df1.shape[0]):
		if df1["species"][i] == "bad":
			color = "red"
		else:
			color = random.choice(s_color)
			s_color.remove(color)
		ax.bar(df1["theta"][i]-df1["width"][i]/2, 15,
			width=df1["width"][i]-np.pi/180,
			bottom= 15, align="center", color=color)
		ax.text(df1["theta"][i]-df1["width"][i]/2, 22.5,
				"%s  %.2f" % (df1["species"][i], df1["percent"][i]*100)+"%",
				ha="center", va="center", size=3,
				rotation=(90+(360-np.degrees(df1["theta"][i]-df1["width"][i]/2)%180))%360,
				name="Times New Roman")

	# the medium circle for O serotype
	df2["width"] = df2["amount"]*unit
	df2["theta"] = df2["width"].cumsum()
	o_num = list(df2["O_type"].unique())
	o_color = dict()
	for i in o_num:
		o_color[i] = randomcolor()
	for i in range(df2.shape[0]):
		if df2["O_type"][i] == "bad":
			color = "red"
			ax.bar(df2["theta"][i]-df2["width"][i]/2, 10, width=df2["width"][i]-np.pi/480,
					bottom= 32, align="center", color=color)
			if df2["percent"][i]*100 > 0.5:
				ax.text(df2["theta"][i]-df2["width"][i]/2, 37,
						"%s  %.2f" % (df2["O_type"][i], df2["percent"][i]*100)+"%",
						ha="center", va="center",size=3,
						rotation=(90+(360-np.degrees(df2["theta"][i]-df2["width"][i]/2)%180))%360,
						name="Times New Roman")
		elif df2["O_type"][i] == "new":
			color = "blue"
			ax.bar(df2["theta"][i]-df2["width"][i]/2, 5, width=df2["width"][i]-np.pi/480,
					bottom= 43, align="center", color=color)
		else:
			color = o_color.get(df2["O_type"][i])
			ax.bar(df2["theta"][i]-df2["width"][i]/2, 10, width=df2["width"][i]-np.pi/480,
					bottom= 32, align="center", color=color)
			if df2["percent"][i]*100 > 0.5:
				ax.text(df2["theta"][i]-df2["width"][i]/2, 37,
						"%s  %.2f" % (df2["O_type"][i], df2["percent"][i]*100)+"%",
						ha="center", va="center",size=3,
						rotation=(90+(360-np.degrees(df2["theta"][i]-df2["width"][i]/2)%180))%360,
						name="Times New Roman")

	# the outer circle for MLST type
	df3["width"] = df3["amount"]*unit
	df3["theta"] = df3["width"].cumsum()
	t_num = list(df3["ST"].unique())
	t_color = dict()
	for i in t_num:
		t_color[i] = randomcolor()
	for i in range(df3.shape[0]):
		if df3["ST"][i] == "bad":
			color = "red"
			ax.bar(df3["theta"][i]-df3["width"][i]/2, 10, width=df3["width"][i]-np.pi/1800,
					bottom= 50, align="center", color=color)
			if df3["percent"][i]*100 > 0.5:
				ax.text(df3["theta"][i]-df3["width"][i]/2, 55,
						"%s  %.2f" % (df3["ST"][i], df3["percent"][i]*100)+"%",
						ha="center", va="center",size=3,
						rotation=(90+(360-np.degrees(df3["theta"][i]-df3["width"][i]/2)%180))%360,
						name="Times New Roman")
		elif df3["ST"][i] == "new":
			color = "blue"
			ax.bar(df3["theta"][i]-df3["width"][i]/2, 5, width=df3["width"][i]-np.pi/1800,
					bottom= 61, align="center", color=color)
			if df3["percent"][i]*100 > 0.5:
				ax.text(df3["theta"][i]-df3["width"][i]/2, 55,
						"%s  %.2f" % (df3["ST"][i], df3["percent"][i]*100)+"%",
						ha="center", va="center",size=3,
						rotation=(90+(360-np.degrees(df3["theta"][i]-df3["width"][i]/2)%180))%360,
						name="Times New Roman")
		else:
			color = t_color.get(df3["ST"][i])
			if list(df3["ST"]).count(df3["ST"][i]) > 1:
				ax.bar(df3["theta"][i]-df3["width"][i]/2, 5, width=df3["width"][i]-np.pi/1800,
						bottom= 67, align="center", color=color)
				if df3["percent"][i]*100 > 0.5:
					ax.text(df3["theta"][i]-df3["width"][i]/2, 55,
							"%s  %.2f" % (df3["ST"][i], df3["percent"][i]*100)+"%",
							ha="center", va="center",size=3,
							rotation=(90+(360-np.degrees(df3["theta"][i]-df3["width"][i]/2)%180))%360,
							name="Times New Roman")
			else:
				ax.bar(df3["theta"][i]-df3["width"][i]/2, 10, width=df3["width"][i]-np.pi/1800,
						bottom= 50, align="center", color=color)
				if df3["percent"][i]*100 > 0.5:
					ax.text(df3["theta"][i]-df3["width"][i]/2, 55,
							"%s  %.2f" % (df3["ST"][i], df3["percent"][i]*100)+"%",
							ha="center", va="center",size=3,
							rotation=(90+(360-np.degrees(df3["theta"][i]-df3["width"][i]/2)%180))%360,
							name="Times New Roman")
	# text Cronobacter in the center
	ax.text(0,0,"Cronobacter",
		ha="center", va="center", weight="bold",fontstyle="italic",
		color="k", size=6, name="Times New Roman")
	# draw the solid line
	r = [14,31,49,73]
	theta = np.linspace(0, np.pi*14/8, 1000)
	for i in r:
		ax.plot(theta, [i]*1000, ls="-", linewidth=1, color="k")
	# draw the dash line
	r = [42.5, 60.5, 66.5]
	for i in r:
		ax.plot(theta, [i]*1000, ls="--", linewidth=0.5, color="k")

	plt.savefig("%s.pdf" % prefix)



if __name__ == "__main__":
	CroTrait(genome_dir="id_3113_3114")

# 	m = O_serotype(OACs_sequence="Cronobacter_OACs.fasta", genome="id-597.fas", species="dublinensis")
# 	print(m)
# 	m1 = O_DO1(OACs_sequence="Cronobacter_OACs.fasta", genome="id-597.fas")
# 	print(m1)
# 	tran_sequence(sequence="id-597.fas", path1=os.getcwd(), path2=os.getcwd())
# 	m2 = O_antigen_cluster(OACs="Cronobacter_OACs.fasta", genome="id-597.fasta", outfmt=1)
# 	print(m2)
	#stat_summary("Cronobacter_MLST_Oserotype4.txt")
	#visualization(Cro_result="Cronobacter_MLST_Oserotype4.txt")
	#batch_clusters(OACs="Cronobacter_OACs.fasta", genome_dir="test_genome", prefix="wanglu")


















